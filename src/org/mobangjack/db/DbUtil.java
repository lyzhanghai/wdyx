package org.mobangjack.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import javax.sql.rowset.CachedRowSet;

import org.apache.log4j.Logger;

import com.sun.rowset.CachedRowSetImpl;

/**
 * Useful database util.
 * @author 帮杰
 *
 */
public class DbUtil {
	
	private static final Logger logger = Logger.getLogger(DbUtil.class);
	
	public static void close(ResultSet rs,Statement sm,Connection con) {
		try {
			if (rs != null) {
				rs.close();
				rs = null;
			}
			if (sm != null) {
				sm.close();
				sm = null;
			}
			if (con != null) {
				con.close();
				con = null;
			}
		} catch (Exception e) {
			logger.error(e);
			e.printStackTrace();
		}
	}
	
	public static PreparedStatement prepareStatement(Connection con,String sql,int autoGeneratedKeys,Object...params){
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement(sql,autoGeneratedKeys);
			for(int i=0;i<params.length;i++){
				ps.setObject(i+1, params[i]);
			}
		} catch (SQLException e) {
			close(null, ps, null);
			logger.error(e);
			e.printStackTrace();
		}
		return ps;
	}
	
	public static PreparedStatement prepareStatement(Connection con,String sql,int autoGeneratedKeys,List<Object> params){
		return prepareStatement(con, sql, autoGeneratedKeys, params.toArray());
	}
	
	public static PreparedStatement prepareStatement(Connection con,String sql,Object...params){
		return prepareStatement(con,sql,PreparedStatement.NO_GENERATED_KEYS,params);
	}
	
	public static PreparedStatement prepareStatement(Connection con,String sql,List<Object> params){
		return prepareStatement(con,sql,params.toArray());
	}
	
	private static CachedRowSet query(PreparedStatement ps){
		CachedRowSet crs = null;
		ResultSet rs = null;
		try {
			rs = ps.executeQuery();
			crs = new CachedRowSetImpl();
			crs.populate(rs);
		} catch (SQLException e) {
			logger.error(e);
			e.printStackTrace();
		} finally {
			close(rs, null, null);
		}
		return crs;
	}
	
	public static CachedRowSet query(Connection con,String sql,Object...params){
		return query(prepareStatement(con,sql,params));
	}
	
	public static CachedRowSet query(Connection con,String sql,List<Object> params){
		return query(con, sql, params.toArray());
	}
	
	public static CachedRowSet query(Connection con,String sql){
		Statement sm = null;
		ResultSet rs = null;
		CachedRowSet crs = null;
		try {
			sm = con.createStatement();
			rs = sm.executeQuery(sql);
			crs = new CachedRowSetImpl();
			crs.populate(rs);
		} catch (SQLException e) {
			logger.error(e);
			e.printStackTrace();
		} finally {
			close(rs, sm, null);
		}
		return crs;
	}
	
	public static boolean update(Connection con,String sql,Object...params){
		boolean flag = true;
		PreparedStatement ps = prepareStatement(con,sql,params);
		try {
			ps.execute();
		} catch (SQLException e) {
			flag = false;
			logger.error(e);
			e.printStackTrace();
		} finally {
			close(null, ps, null);
		}
		return flag;
	}
	
	public static boolean update(Connection con,String sql,List<Object> params){
		return update(con,sql,params.toArray());
	}
	
	public static boolean update(Connection con,String sql){
		boolean flag = true;
		Statement sm = null;
		try {
			sm = con.createStatement();
			sm.execute(sql);
		} catch (SQLException e) {
			flag = false;
			logger.error(e);
			e.printStackTrace();
		} finally {
			close(null, sm, null);
		}
		return flag;
	}
	
	public static Object getGeneratedKey(PreparedStatement ps) {
		Object key = null;
		ResultSet rs = null;
		try {
			rs = ps.getGeneratedKeys();
			if(rs.next()){
				key = rs.getObject(1);
			}
		} catch (SQLException e) {
			logger.error(e);
			e.printStackTrace();
		} finally {
			close(rs, null, null);
		}
		return key;
	}
	
	public static Object updateAndRetrieveKey(Connection con,String sql,Object...params){
		Object key = null;
		PreparedStatement ps = prepareStatement(con, sql, params);
		try {
			ps.execute();
			key = getGeneratedKey(ps);
		} catch (SQLException e) {
			logger.error(e);
			e.printStackTrace();
		} finally {
			close(null, ps, null);
		}
		return key;
	}
	
	public static Object updateAndRetrieveKey(Connection con,String sql,List<Object> params){
		return updateAndRetrieveKey(con,sql,params.toArray());
	}
	
	public static Object updateAndRetrieveKey(Connection con,String sql){
		Object key = null;
		Statement sm = null;
		ResultSet rs = null;
		try {
			sm = con.createStatement();
			sm.executeUpdate(sql,Statement.RETURN_GENERATED_KEYS);
			rs = sm.getGeneratedKeys();
			if(rs.next()){
				key = rs.getObject(1);
			}
		} catch (SQLException e) {
			logger.error(e);
			e.printStackTrace();
		} finally{
			close(rs, sm, null);
		}
		return key;
	}
	
}
